//
//  SwiftPrompts.swift
//  ProjectName
//
//  Created by Gabriel Alvarado on 3/17/15.
//  Copyright (c) 2015 CompanyName. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class SwiftPrompts : NSObject {

    //// Drawing Methods

    public class func drawSwiftPrompt(#frame: CGRect, backgroundColor: UIColor, headerBarColor: UIColor, bottomBarColor: UIColor, headerTxtColor: UIColor, contentTxtColor: UIColor, outlineColor: UIColor, topLineColor: UIColor, bottomLineColor: UIColor, promptText: String, textSize: CGFloat, topBarVisibility: Bool, bottomBarVisibility: Bool, headerText: String, headerSize: CGFloat, topLineVisibility: Bool, bottomLineVisibility: Bool, outlineVisibility: Bool) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRectMake(frame.minX + 4, frame.minY + 9, floor((frame.width - 4) * 0.98643 + 0.5), floor((frame.height - 9) * 0.94681 + 0.5)), cornerRadius: 12)
        backgroundColor.setFill()
        rectanglePath.fill()


        if (outlineVisibility) {
            //// Rectangle 6 Drawing
            let rectangle6Path = UIBezierPath(roundedRect: CGRectMake(frame.minX + 4, frame.minY + 9, floor((frame.width - 4) * 0.98643 + 0.5), floor((frame.height - 9) * 0.94681 + 0.5)), cornerRadius: 12)
            outlineColor.setStroke()
            rectangle6Path.lineWidth = 3.5
            rectangle6Path.stroke()
        }


        if (bottomBarVisibility) {
            //// Rectangle 2 Drawing
            var rectangle2Path = UIBezierPath(roundedRect: CGRectMake(frame.minX + 4, frame.minY + floor((frame.height - 10) * 0.78075 + 0.5), floor((frame.width - 4) * 0.98643 + 0.5), frame.height - 10 - floor((frame.height - 10) * 0.78075 + 0.5)), byRoundingCorners: UIRectCorner.BottomLeft | UIRectCorner.BottomRight, cornerRadii: CGSizeMake(12, 12))
            rectangle2Path.closePath()
            bottomBarColor.setFill()
            rectangle2Path.fill()
        }


        //// Text Drawing
        let textRect = CGRectMake(frame.minX + floor(frame.width * 0.04000 + 0.5), frame.minY + floor(frame.height * 0.28426 + 0.5), floor(frame.width * 0.96000 + 0.5) - floor(frame.width * 0.04000 + 0.5), floor(frame.height * 0.73096 + 0.5) - floor(frame.height * 0.28426 + 0.5))
        let textStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        textStyle.alignment = NSTextAlignment.Center

        let textFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Light", size: textSize)!, NSForegroundColorAttributeName: contentTxtColor, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = NSString(string: promptText).boundingRectWithSize(CGSizeMake(textRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, textRect);
        NSString(string: promptText).drawInRect(CGRectMake(textRect.minX, textRect.minY + (textRect.height - textTextHeight) / 2, textRect.width, textTextHeight), withAttributes: textFontAttributes)
        CGContextRestoreGState(context)


        if (topBarVisibility) {
            //// Rectangle 3 Drawing
            var rectangle3Path = UIBezierPath(roundedRect: CGRectMake(frame.minX + 4, frame.minY + 9, floor((frame.width - 4) * 0.98643 + 0.5), floor((frame.height - 9) * 0.23404 + 0.5)), byRoundingCorners: UIRectCorner.TopLeft | UIRectCorner.TopRight, cornerRadii: CGSizeMake(12, 12))
            rectangle3Path.closePath()
            headerBarColor.setFill()
            rectangle3Path.fill()
        }


        //// Text 2 Drawing
        let text2Rect = CGRectMake(frame.minX + 12, frame.minY + 23, floor((frame.width - 12) * 0.93427 + 0.5), floor((frame.height - 23) * 0.10920 + 0.5))
        let text2Style = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        text2Style.alignment = NSTextAlignment.Center

        let text2FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Light", size: headerSize)!, NSForegroundColorAttributeName: headerTxtColor, NSParagraphStyleAttributeName: text2Style]

        let text2TextHeight: CGFloat = NSString(string: headerText).boundingRectWithSize(CGSizeMake(text2Rect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, text2Rect);
        NSString(string: headerText).drawInRect(CGRectMake(text2Rect.minX, text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, text2Rect.width, text2TextHeight), withAttributes: text2FontAttributes)
        CGContextRestoreGState(context)


        if (topLineVisibility) {
            //// Rectangle 4 Drawing
            let rectangle4Path = UIBezierPath(rect: CGRectMake(frame.minX + floor(frame.width * 0.04444 + 0.5), frame.minY + floor(frame.height * 0.26396 + 0.5), floor(frame.width * 0.96444 + 0.5) - floor(frame.width * 0.04444 + 0.5), floor(frame.height * 0.26904 + 0.5) - floor(frame.height * 0.26396 + 0.5)))
            topLineColor.setFill()
            rectangle4Path.fill()
        }


        if (bottomLineVisibility) {
            //// Rectangle 5 Drawing
            let rectangle5Path = UIBezierPath(rect: CGRectMake(frame.minX + floor(frame.width * 0.04444 + 0.5), frame.minY + floor(frame.height * 0.74619 + 0.5), floor(frame.width * 0.96444 + 0.5) - floor(frame.width * 0.04444 + 0.5), floor(frame.height * 0.75127 + 0.5) - floor(frame.height * 0.74619 + 0.5)))
            bottomLineColor.setFill()
            rectangle5Path.fill()
        }
    }

}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
